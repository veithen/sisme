<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book>
    <bookinfo>
        <title>Jahath Manual</title>
        <releaseinfo>&version;</releaseinfo>
        <legalnotice>
            <para>
                Copyright 2009 Andreas Veithen
            </para>
            <para>
                Licensed under the Apache License, Version 2.0 (the "License");
                you may not use this file except in compliance with the License.
                You may obtain a copy of the License at
            </para>
            <para>
                <ulink url="http://www.apache.org/licenses/LICENSE-2.0"/>
            </para>
            <para>
                Unless required by applicable law or agreed to in writing, software
                distributed under the License is distributed on an "AS IS" BASIS,
                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                See the License for the specific language governing permissions and
                limitations under the License.
            </para>
        </legalnotice>
    </bookinfo>
    
    <toc/>
    
    <chapter>
        <title>Protocol specification</title>
        <section>
            <title>Introduction</title>
            <para>
                VC/H (<firstterm>Virtual Circuit over HTTP</firstterm>) is a communication protocol
                that establishes a virtual circuit over HTTP. More precisely it creates a virtual
                two-way stream oriented communication channel similar to a TCP connection. Since
                HTTP itself is based on TCP, the main purpose of VC/H is to tunnel TCP connections
                over HTTP in situations where direct TCP connections between two hosts are prohibited.
            </para>
            <para>
                The protocol is designed to support direct HTTP connections as well as HTTP connections
                that are established through an HTTP proxy. In particular, it is interoperable with
                proxies that buffer requests and/or responses (i.e. that do not forward data immediately
                and only flush the buffered data when the request or response entity is complete) or
                that require the client to transmit the entire request entity before starting to forward
                the response entity.
            </para>
            <para>
                VC/H relies on HTTP 1.1 specific features and doesn't support HTTP 1.0. Since the
                protocol is usually implemented using HTTP clients and servers built specifically for
                that purpose, this is only a restriction in scenarios where the connection has to go
                through an HTTP proxy, because the user of the VC/H implementation in general has no
                control over this proxy.
            </para>
            <para>
                VC/H is specified by a set of request-response exchanges that define the
                HTTP methods, request URIs and headers used by the protocol. Formally, the specification
                closely resembles that of a RESTful service, though the nature of the interaction is
                quite different. Note that VC/H only uses standard HTTP methods as defined by RFC2616
                because some HTTP clients, proxies or servers may not support custom methods.
            </para>
        </section>
        <section>
            <title>Client-server architecture</title>
            <para>
                VC/H is a client-server protocol. In particular, connections requests are always
                initiated by the client. Also, in general, a host or process implementing the
                VC/H protocol will either always act as a client or always act as a server.
                Scenarios where a host or process can act both as a client and server will be unusual.
            </para>
            <para>
                A server implementing the VC/H protocol may host different endpoints accepting
                connections from clients. These endpoints are called <firstterm>service
                endpoints</firstterm> or simply <firstterm>services</firstterm>. In general,
                services will differ by the application protocol they implement on top of
                VC/H. Each service is identified by a name that must be unique for the given
                VC/H server instance. In order to be able to connect to a service, a client
                therefore needs to know (1) the host name or IP address of the server, (2) the
                TCP port on which the HTTP server implementation listens and (3) the name of
                the service to connect to.
            </para>
            <para>
                As described above, a VC/H connection establishes a two-way stream oriented communication
                channel between the client and the service endpoint. This connection is full-duplex, i.e.
                data may flow in both directions simultaneously. Once a connection is established, either
                the client or the server may start the conversation, or they may both start sending data.
                Data submitted by the sender application (client or service endpoint) to the VC/H layer
                is not guaranteed to be delivered immediately to the receiving side of the connection, but
                may be buffered by the VC/H implementation or an HTTP proxy through which the connection
                is established. The sender must flush the stream explicitly to push buffered data to the
                receiver. While the flush operation logically divides the stream into individual
                transmission units, VC/H makes no provisions to preserve this structure, i.e. the
                receiver will not be able to detect the corresponding message boundaries.
                Finally, connection shutdown may be initiated either by the client or the service
                endpoint.
            </para>
            <para>
                All these properties make the service provided by the VC/H layer similar to the
                service provided by the TCP protocol. This is of course by design because the primary
                use case of the VC/H protocol is to tunnel TCP connections over HTTP.
            </para>
        </section>
        <section>
            <title>Detailed protocol specification</title>
            <section>
                <title>Connection request</title>
                <variablelist>
                    <varlistentry>
                        <term>Method</term>
                        <listitem>
                            <synopsis>POST</synopsis>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Request URI</term>
                        <listitem>
                            <synopsis>/services/<replaceable>service-name</replaceable></synopsis>
                            <para>
                                <replaceable>service-name</replaceable> is the name of the service endpoint
                                to which the connection request is addressed. Service names are case sensitive and must match the
                                <link linkend="service.name">ServiceName</link> production:
                            </para>
                            <productionset>
                                <title>Service endpoint names</title>
                                <production id="service.name">
                                    <lhs>ServiceName</lhs>
                                    <rhs>(<nonterminal def="#service.name.char">ServiceNameChar</nonterminal>)+</rhs>
                                </production>
                                <production id="service.name.char">
                                    <lhs>ServiceNameChar</lhs>
                                    <rhs><nonterminal def="#alpha">Alpha</nonterminal> | <nonterminal def="#digit">Digit</nonterminal> | <literal>'-'</literal> | <literal>'.'</literal> | <literal>'_'</literal> | <literal>':'</literal></rhs>
                                </production>
                                <production id="alpha">
                                    <lhs>Alpha</lhs>
                                    <rhs>[<literal>'A'</literal>-<literal>'Z'</literal>] | [<literal>'a'</literal>-<literal>'z'</literal>]</rhs>
                                </production>
                                <production id="digit">
                                    <lhs>Digit</lhs>
                                    <rhs>[<literal>'0'</literal>-<literal>'9'</literal>]</rhs>
                                </production>
                            </productionset>
                            <para>
                                A list of well known service names is given in <xref linkend="well.known.services"/>.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Request headers</term>
                        <listitem>
                            <variablelist>
                                <varlistentry>
                                    <term><literal>X-VCH-Version</literal> (mandatory)</term>
                                    <listitem>
                                        <para>Specifies the version of the VC/H protocol that the client wishes to use. This must be <literal>1.0</literal>.</para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Response codes</term>
                        <listitem>
                            <variablelist>
                                <varlistentry>
                                    <term>201 Created</term>
                                    <listitem>
                                        <para>
                                            Indicates that the connection has been succesfully created. The <literal>Location</literal>
                                            header contains a URI that identifies the connection (see below).
                                        </para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>400 Bad Request</term>
                                    <listitem>
                                        <para>
                                            Used if the request didn't contain an <literal>X-VCH-Version</literal> header or if the
                                            server was unable to understand the request for some other reason.
                                        </para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>404 Not Found</term>
                                    <listitem>
                                        <para>
                                            Indicates that no service is registered for the service name provided by the client.
                                        </para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>500 Internal Server Error</term>
                                    <listitem>
                                        <para>
                                            Used if the request contained an <literal>X-VCH-Version</literal> header requesting a
                                            VC/H protocol version that is not supported by the server, or if some other problem
                                            prevented the server from fulfilling the request.
                                        </para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Response headers</term>
                        <listitem>
                            <variablelist>
                                <varlistentry>
                                    <term><literal>X-VCH-Version</literal> (mandatory for 201)</term>
                                    <listitem>
                                        <para>Specifies the version of the VC/H protocol that the server expects. This must be <literal>1.0</literal>.</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term><literal>Location</literal> (mandatory for 201)</term>
                                    <listitem>
                                        <para>
                                            A URI that identifies the newly created connection. It must be of the following form:
                                        </para>
                                        <synopsis>http(s)://<replaceable>host-part</replaceable>/connections/<replaceable>connection-id</replaceable></synopsis>
                                        <para>
                                            The <replaceable>connection-id</replaceable> is case sensitive an must match the following production:
                                        </para>
                                        <productionset>
                                            <title>Connection IDs</title>
                                            <production id="connection.id">
                                                <lhs>ConnectionId</lhs>
                                                <rhs>(<nonterminal def="#connection.id.char">ConnectionIdChar</nonterminal>)+</rhs>
                                            </production>
                                            <production id="connection.id.char">
                                                <lhs>ConnectionIdChar</lhs>
                                                <rhs><nonterminal def="#alpha">Alpha</nonterminal> | <nonterminal def="#digit">Digit</nonterminal> | <literal>'-'</literal> | <literal>'.'</literal> | <literal>'_'</literal> | <literal>':'</literal> | <literal>'!'</literal> | <literal>'@'</literal></rhs>
                                            </production>
                                        </productionset>
                                        <para>
                                            The server must choose a connection ID that is sufficiently random in order to
                                            prevent an attacker from guessing connection IDs. In particular, the minimum length
                                            for the connection ID is 10 characters.
                                        </para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Processing requirements</term>
                        <listitem>
                            <itemizedlist>
                                <listitem>
                                    <para>
                                        The client may either store the URI returned in the <literal>Location</literal> header
                                        and use this URI in subsequent requests, or it may parse the URI to extract the
                                        connection ID and construct the URIs for subsequent requests from this connection ID.
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section>
                <title>Error reporting</title>
                <para>
                    The VC/H server MUST report error conditions using the 4xx and 5xx status codes foreseen by the HTTP protocol.
                    The server SHOULD use standard reason phrases, e.g. "Bad Request" for status code 400. For any
                    status codes in the 4xx and 5xx range, the server MUST include a human readable error message in the response.
                    This message MUST be transmitted as the message body of the response. Its content type MUST be
                    <literal>text/plain</literal> with an appropriate charset encoding. The client SHOULD extract the
                    message body and present the error message to the user, except if the status code has an unambiguous meaning
                    in the given context.
                </para>
                <para>
                    A VC/H client should interpret reception of an HTTP response with a status code in the 4xx or 5xx range
                    and with a content type other than <literal>text/plain</literal> as an indication that the server doesn't
                    implement the VC/H protocol or that an HTTP proxy rejected the request.
                </para>
            </section>
            <section id="well.known.services">
                <title>Well known service names</title>
                <para>
                    The following table specifies a list of well known VC/H services. If a server has a service endpoint
                    that implements one of the given protocols, it SHOULD use the corresponding service name. If a
                    server has a service endpoint that uses one of the given service names, then this endpoint MUST
                    implement the corresponding protocol. Note that depending on the implementation of the server, this
                    requirement cannot be enforced by the server itself and it is the responsibility of the user to
                    configure the server in such a way that the requirement is satisfied.
                </para>
                <table>
                    <title>Well known VC/H services</title>
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry>Service endpoint name</entry>
                                <entry>Protocol description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><literal>echo</literal></entry>
                                <entry>A service that echoes all data sent to it back to the client.</entry>
                            </row>
                            <row>
                                <entry><literal>socks</literal></entry>
                                <entry>An implementation of the SOCKS 5 protocol.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <para> 
                    Note that there is no requirement for the server to implement any of these endpoints.
                </para>
            </section>
        </section>
    </chapter>
</book>